
SYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000174  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000280  08000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000280  08000280  00010288  2**0
                  CONTENTS
  4 .ARM          00000000  08000280  08000280  00010288  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000280  08000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000280  08000280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000284  08000284  00010284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000288  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000288  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000102b1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004ef  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e3  00000000  00000000  000107e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00010ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008f  00000000  00000000  00010ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001498c  00000000  00000000  00010c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000af6  00000000  00000000  000255bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ad86  00000000  00000000  000260b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000218  00000000  00000000  000a0e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a1050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000268 	.word	0x08000268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000268 	.word	0x08000268

0800014c <SYSTICK_reset>:

	clear_Bit(SYSTICK->CTRL,0);
}


void SYSTICK_reset(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

	//disable systick timer
	SYSTICK->CTRL = 0;
 8000150:	4b09      	ldr	r3, [pc, #36]	; (8000178 <SYSTICK_reset+0x2c>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]

	//clear values in val reg and reload reg
	SYSTICK->VAL = 0;
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <SYSTICK_reset+0x2c>)
 8000158:	2200      	movs	r2, #0
 800015a:	609a      	str	r2, [r3, #8]
	SYSTICK->LOAD = 0;
 800015c:	4b06      	ldr	r3, [pc, #24]	; (8000178 <SYSTICK_reset+0x2c>)
 800015e:	2200      	movs	r2, #0
 8000160:	605a      	str	r2, [r3, #4]

	clear_Bit(SYSTICK->CTRL,16);
 8000162:	4b05      	ldr	r3, [pc, #20]	; (8000178 <SYSTICK_reset+0x2c>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4a04      	ldr	r2, [pc, #16]	; (8000178 <SYSTICK_reset+0x2c>)
 8000168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800016c:	6013      	str	r3, [r2, #0]


}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	e000e010 	.word	0xe000e010

0800017c <SysTick_Handler>:

		}
}


void SysTick_Handler(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0



		if(callBackFunc != NULL){
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <SysTick_Handler+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d008      	beq.n	800019a <SysTick_Handler+0x1e>

			if(intervalMode == SINGLE_INTERVAL){
 8000188:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <SysTick_Handler+0x34>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d101      	bne.n	8000194 <SysTick_Handler+0x18>

				SYSTICK_reset();
 8000190:	f7ff ffdc 	bl	800014c <SYSTICK_reset>
			}
			callBackFunc();
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <SysTick_Handler+0x30>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3
		}

		//clear count flag
		clear_Bit(SYSTICK->CTRL,16);
 800019a:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <SysTick_Handler+0x38>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a05      	ldr	r2, [pc, #20]	; (80001b4 <SysTick_Handler+0x38>)
 80001a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001a4:	6013      	str	r3, [r2, #0]

}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	20000020 	.word	0x20000020
 80001b4:	e000e010 	.word	0xe000e010

080001b8 <main>:
  *
  ******************************************************************************
  */


int main(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0




	return 0;
 80001bc:	2300      	movs	r3, #0
}
 80001be:	4618      	mov	r0, r3
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001c6:	b480      	push	{r7}
 80001c8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001ca:	bf00      	nop
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
	...

080001d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80001d4:	f7ff fff7 	bl	80001c6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001da:	490c      	ldr	r1, [pc, #48]	; (800020c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001dc:	4a0c      	ldr	r2, [pc, #48]	; (8000210 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e0:	e002      	b.n	80001e8 <LoopCopyDataInit>

080001e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001e6:	3304      	adds	r3, #4

080001e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001ec:	d3f9      	bcc.n	80001e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ee:	4a09      	ldr	r2, [pc, #36]	; (8000214 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001f0:	4c09      	ldr	r4, [pc, #36]	; (8000218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f4:	e001      	b.n	80001fa <LoopFillZerobss>

080001f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f8:	3204      	adds	r2, #4

080001fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001fc:	d3fb      	bcc.n	80001f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001fe:	f000 f80f 	bl	8000220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000202:	f7ff ffd9 	bl	80001b8 <main>
  bx lr
 8000206:	4770      	bx	lr
  ldr r0, =_sdata
 8000208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800020c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000210:	08000288 	.word	0x08000288
  ldr r2, =_sbss
 8000214:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000218:	20000024 	.word	0x20000024

0800021c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800021c:	e7fe      	b.n	800021c <ADC1_2_IRQHandler>
	...

08000220 <__libc_init_array>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2600      	movs	r6, #0
 8000224:	4d0c      	ldr	r5, [pc, #48]	; (8000258 <__libc_init_array+0x38>)
 8000226:	4c0d      	ldr	r4, [pc, #52]	; (800025c <__libc_init_array+0x3c>)
 8000228:	1b64      	subs	r4, r4, r5
 800022a:	10a4      	asrs	r4, r4, #2
 800022c:	42a6      	cmp	r6, r4
 800022e:	d109      	bne.n	8000244 <__libc_init_array+0x24>
 8000230:	f000 f81a 	bl	8000268 <_init>
 8000234:	2600      	movs	r6, #0
 8000236:	4d0a      	ldr	r5, [pc, #40]	; (8000260 <__libc_init_array+0x40>)
 8000238:	4c0a      	ldr	r4, [pc, #40]	; (8000264 <__libc_init_array+0x44>)
 800023a:	1b64      	subs	r4, r4, r5
 800023c:	10a4      	asrs	r4, r4, #2
 800023e:	42a6      	cmp	r6, r4
 8000240:	d105      	bne.n	800024e <__libc_init_array+0x2e>
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	f855 3b04 	ldr.w	r3, [r5], #4
 8000248:	4798      	blx	r3
 800024a:	3601      	adds	r6, #1
 800024c:	e7ee      	b.n	800022c <__libc_init_array+0xc>
 800024e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000252:	4798      	blx	r3
 8000254:	3601      	adds	r6, #1
 8000256:	e7f2      	b.n	800023e <__libc_init_array+0x1e>
 8000258:	08000280 	.word	0x08000280
 800025c:	08000280 	.word	0x08000280
 8000260:	08000280 	.word	0x08000280
 8000264:	08000284 	.word	0x08000284

08000268 <_init>:
 8000268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026a:	bf00      	nop
 800026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026e:	bc08      	pop	{r3}
 8000270:	469e      	mov	lr, r3
 8000272:	4770      	bx	lr

08000274 <_fini>:
 8000274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000276:	bf00      	nop
 8000278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027a:	bc08      	pop	{r3}
 800027c:	469e      	mov	lr, r3
 800027e:	4770      	bx	lr
