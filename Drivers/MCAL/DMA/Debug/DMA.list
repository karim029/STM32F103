
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000374  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000374  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001039d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000699  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002c9  00000000  00000000  00010a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00010d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b5  00000000  00000000  00010e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000149ff  00000000  00000000  00010f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c5e  00000000  00000000  00025904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007af97  00000000  00000000  00026562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002e8  00000000  00000000  000a14fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000a17e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000354 	.word	0x08000354

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000354 	.word	0x08000354

0800014c <DMA_clearFlag>:
        set_Bit(DMA->DMA_channel[channel].CCR, 13);
    }
}


void DMA_clearFlag(uint8_t channelNum, uint8_t flag){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]

	channelNum *=4;
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	71fb      	strb	r3, [r7, #7]

	set_Bit(DMA->IFCR,(channelNum+flag));
 8000162:	4b08      	ldr	r3, [pc, #32]	; (8000184 <DMA_clearFlag+0x38>)
 8000164:	685b      	ldr	r3, [r3, #4]
 8000166:	79f9      	ldrb	r1, [r7, #7]
 8000168:	79ba      	ldrb	r2, [r7, #6]
 800016a:	440a      	add	r2, r1
 800016c:	2101      	movs	r1, #1
 800016e:	fa01 f202 	lsl.w	r2, r1, r2
 8000172:	4611      	mov	r1, r2
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <DMA_clearFlag+0x38>)
 8000176:	430b      	orrs	r3, r1
 8000178:	6053      	str	r3, [r2, #4]
}
 800017a:	bf00      	nop
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	40020000 	.word	0x40020000

08000188 <DMA_ISRclearFlags>:

	return get_Bit(DMA->ISR,(channelNum + flag));
}


static void DMA_ISRclearFlags(uint8_t channelNum){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	71fb      	strb	r3, [r7, #7]

	DMA_clearFlag(channelNum, DMA_GIF);
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f7ff ffd8 	bl	800014c <DMA_clearFlag>
	DMA_clearFlag(channelNum, DMA_TCIF);
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	2101      	movs	r1, #1
 80001a0:	4618      	mov	r0, r3
 80001a2:	f7ff ffd3 	bl	800014c <DMA_clearFlag>
	DMA_clearFlag(channelNum, DMA_HTIF);
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2102      	movs	r1, #2
 80001aa:	4618      	mov	r0, r3
 80001ac:	f7ff ffce 	bl	800014c <DMA_clearFlag>
	DMA_clearFlag(channelNum, DMA_TEIF);
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	2103      	movs	r1, #3
 80001b4:	4618      	mov	r0, r3
 80001b6:	f7ff ffc9 	bl	800014c <DMA_clearFlag>
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <DMA1_Channel1_IRQHandler>:
			callBackFunc[channelNum] = fptr;
		}
	}
}

void DMA1_Channel1_IRQHandler(){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL1] != NULL){
 80001c8:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <DMA1_Channel1_IRQHandler+0x1c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d002      	beq.n	80001d6 <DMA1_Channel1_IRQHandler+0x12>

		callBackFunc[CHANNEL1]();
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <DMA1_Channel1_IRQHandler+0x1c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL1);
 80001d6:	2000      	movs	r0, #0
 80001d8:	f7ff ffd6 	bl	8000188 <DMA_ISRclearFlags>

}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000001c 	.word	0x2000001c

080001e4 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL2] != NULL){
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <DMA1_Channel2_IRQHandler+0x1c>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d002      	beq.n	80001f6 <DMA1_Channel2_IRQHandler+0x12>

		callBackFunc[CHANNEL2]();
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <DMA1_Channel2_IRQHandler+0x1c>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL2);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f7ff ffc6 	bl	8000188 <DMA_ISRclearFlags>

}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	2000001c 	.word	0x2000001c

08000204 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL3] != NULL){
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <DMA1_Channel3_IRQHandler+0x1c>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d002      	beq.n	8000216 <DMA1_Channel3_IRQHandler+0x12>

		callBackFunc[CHANNEL3]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <DMA1_Channel3_IRQHandler+0x1c>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL3);
 8000216:	2002      	movs	r0, #2
 8000218:	f7ff ffb6 	bl	8000188 <DMA_ISRclearFlags>

}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	2000001c 	.word	0x2000001c

08000224 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL4] != NULL){
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <DMA1_Channel4_IRQHandler+0x1c>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <DMA1_Channel4_IRQHandler+0x12>

		callBackFunc[CHANNEL4]();
 8000230:	4b03      	ldr	r3, [pc, #12]	; (8000240 <DMA1_Channel4_IRQHandler+0x1c>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL4);
 8000236:	2003      	movs	r0, #3
 8000238:	f7ff ffa6 	bl	8000188 <DMA_ISRclearFlags>

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	2000001c 	.word	0x2000001c

08000244 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL5] != NULL){
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <DMA1_Channel5_IRQHandler+0x1c>)
 800024a:	691b      	ldr	r3, [r3, #16]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d002      	beq.n	8000256 <DMA1_Channel5_IRQHandler+0x12>

		callBackFunc[CHANNEL5]();
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <DMA1_Channel5_IRQHandler+0x1c>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL5);
 8000256:	2004      	movs	r0, #4
 8000258:	f7ff ff96 	bl	8000188 <DMA_ISRclearFlags>

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	2000001c 	.word	0x2000001c

08000264 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL6] != NULL){
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <DMA1_Channel6_IRQHandler+0x1c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d002      	beq.n	8000276 <DMA1_Channel6_IRQHandler+0x12>

		callBackFunc[CHANNEL6]();
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <DMA1_Channel6_IRQHandler+0x1c>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL6);
 8000276:	2005      	movs	r0, #5
 8000278:	f7ff ff86 	bl	8000188 <DMA_ISRclearFlags>

}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	2000001c 	.word	0x2000001c

08000284 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0

	if(callBackFunc[CHANNEL7] != NULL){
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <DMA1_Channel7_IRQHandler+0x1c>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d002      	beq.n	8000296 <DMA1_Channel7_IRQHandler+0x12>

		callBackFunc[CHANNEL7]();
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <DMA1_Channel7_IRQHandler+0x1c>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4798      	blx	r3
	}

	DMA_ISRclearFlags(CHANNEL7);
 8000296:	2006      	movs	r0, #6
 8000298:	f7ff ff76 	bl	8000188 <DMA_ISRclearFlags>

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <main>:
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */

int main(){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0



	return 0;
 80002a8:	2300      	movs	r3, #0

}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr

080002b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
	...

080002c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002c0:	f7ff fff7 	bl	80002b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002c6:	490c      	ldr	r1, [pc, #48]	; (80002f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a09      	ldr	r2, [pc, #36]	; (8000300 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002dc:	4c09      	ldr	r4, [pc, #36]	; (8000304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ea:	f000 f80f 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ffd9 	bl	80002a4 <main>
  bx lr
 80002f2:	4770      	bx	lr
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	20000038 	.word	0x20000038

08000308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_2_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	2600      	movs	r6, #0
 8000310:	4d0c      	ldr	r5, [pc, #48]	; (8000344 <__libc_init_array+0x38>)
 8000312:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	f000 f81a 	bl	8000354 <_init>
 8000320:	2600      	movs	r6, #0
 8000322:	4d0a      	ldr	r5, [pc, #40]	; (800034c <__libc_init_array+0x40>)
 8000324:	4c0a      	ldr	r4, [pc, #40]	; (8000350 <__libc_init_array+0x44>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
